Parameters:

    EnvironmentName:
        Description: environmentname
        Type: String 
        
       
Resources: 
 
  LBSecurityGrp: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: allow http
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  
  
  WebSecurityGrp: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: allow http
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
 
  S3ReadRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      RoleName: S3ReadRole
      Path: "/"

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3Allow
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - s3:Get*
          - s3:List*
          Resource: "*"
      Roles:
      -
        Ref: S3ReadRole


  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    DependsOn: S3ReadRole
    Properties:
      Path: "/"
      Roles:
        - S3ReadRole

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      UserData:
          Fn::Base64:
            Fn::Join:
             - ''
             - - "#!/bin/bash \n"
               - "apt-get update -y \n"
               - "apt-get install unzip awscli -y \n"
               - "apt-get install apache2 -y \n"
               - "systemctl start apache2.service \n"
               - "cd /var/www/html \n "
               - "aws s3 cp s3://udacity-demo-1/udacity.zip  . \n"
               - "unzip -o udacity.zip \n"
            
            
            
            
            
            
            
                 
              
      ImageId: ami-06d51e91cea0dac8d
      SecurityGroups:
      - Ref: WebSecurityGrp 

      InstanceType: t3.medium
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk" 
        Ebs:
          VolumeSize: '10' 
      
     
  WebAppGroup: 
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      VPCZoneIdentifier: 
      - Fn::ImportValue:
          !Sub "${EnvironmentName}-PRIV-NETS"      
      LaunchConfigurationName: 
        Ref: WebAppLaunchConfig
      MinSize: "3"
      MaxSize: "5"
      TargetGroupARNs:
        - Ref: WebAppTargetGroup    
    
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecurityGrp
      
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLB
      Port: 80
      Protocol: "HTTP"
   
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties: 
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'WebAppTargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'Listener'
      Priority: 1
       
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 35
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
      TargetType: instance 
